{% extends "PackagistWebBundle::layout.html.twig" %}

{% block content %}
<section class="row">
    <section class="col-lg-6 getting-started">
        <h2 class="title">Getting Started</h2>
        <div>
            <p>The plugin repository for Roundcube is based on <a href="http://getcomposer.org/">Composer</a>
                to manage, install and update the plugins for your Roundcube installation. The following two
                steps are necessary to connect your local Roundcube installation to the plugin repository:</p>

            <h3>1. Install Composer</h3>
            <p>Run this in your command line:</p>
<pre><code>cd &lt;roundcube-project-root&gt;
curl -s https://getcomposer.org/installer | php
</code></pre>
            <p>Or <a href="http://getcomposer.org/download/">download composer.phar</a> into your Roundcube
                root directory.</p>

            <h3>2. Configure composer.json</h3>
            <p>Copy the template <tt>composer.json-dist</tt> to <tt>composer.json</tt> in your Roundcube
                root directory.</p>

            <h3>3. Installing plugins</h3>
            <p><a href="{{ path('browse') }}">Browse</a> through our repository and find the plugins you
                want to install.</p>
            <p>Then edit your local composer.json file and add the <code>"vendor/plugin"</code> names to the
                <code>"require"</code> section of the JSON structure. Don't forget to specify the version
                constraint:</p>
<pre><code>"require" : {
    ...,
    "roundcube/rcsample": ">=0.2.0"
}</code></pre>
            <p>After every change to composer.json run</p>
            <pre><code>php composer.phar install</code></pre>
            <p>to download and install all dependencies.</p>
            <p>The plugins are installed to the <code>plugins/</code> directory and when running the install
                command you'll be asked whether to activate the plugins right away. For any later activation
                or deactivation of a plugin, you can add/remove the plugin name to/from the <code>$config['plugins']</code>
                option in your local Roundcube config file config/config.inc.php.</p>
        </div>
    </section>

    <section class="col-lg-6 publishing-packages">
        <h2 class="title">Publishing Plugins</h2>
        <div>
            <ol>
                <li><p>Read the <a href="https://github.com/roundcube/roundcubemail/wiki/Plugins">short introduction</a>
                    how to write plugins for Roundcube on our wiki. Once you have your plugin ready for distribution,
                    commit the code to a plublic git or svn repository like github. Make sure the plugin contents
                    (e.g .php) are placed in the root direcotry of the git repository.</p></li>
                <li><p>Then put a file named composer.json to the root of your plugin repository,
                    containing the following information:</p>
<pre><code>{
    "name": "&lt;your-vendor-name&gt;/&lt;plugin-name&gt;",
    "type": "roundcube-plugin",
    "license": "GPL-3.0+",
    "repositories": [
        {
            "type": "composer",
            "url": "https://plugins.roundcube.net"
        }
    ],
    "require": {
        "roundcube/plugin-installer": ">=0.1.6"
    }
}</code></pre>
                <p>This is the strictly minimal information you have to provide. For more details about package
                    naming and the fields you can use to describe your plugin better, see the
                    <a href="{{ path('about') }}">about page</a>.</p>
                </li>
                <li><p>Publish your plugin on this platform. <a href="{{ path('hwi_oauth_connect') }}">Login</a>
                    or <a href="{{ path('fos_user_registration_register') }}">register</a>
                    on this site, then hit the big fat button that says "Submit plugin".</p></li>
            </ol>
            <p>Once you entered your public repository URL in there, your package will be automatically
                crawled periodically and published on this platform. You just have to make sure you keep the
                composer.json file up to date.</p>
        </div>
    </section>
</section>
{% endblock %}
